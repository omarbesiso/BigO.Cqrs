using Microsoft.Extensions.Logging;

namespace BigO.Cqrs.Logging;

/// <summary>
///     Contains strongly-typed logging delegates generated by the source generator
///     for CQRS operations. This class is partial and static, allowing the source
///     generator to augment it.
/// </summary>
internal static partial class CqrsLog
{
    // --- Query Logging Methods ---

    [LoggerMessage(
        EventId = 1001, // Ensure EventIds are unique within your logging scope
        Level = LogLevel.Debug,
        Message = "Start reading query '{QueryName}'")]
    internal static partial void StartReadingQuery(ILogger logger, string queryName);

    [LoggerMessage(
        EventId = 1002,
        Level = LogLevel.Error,
        Message = "Exception thrown while reading query '{QueryName}'")]
    internal static partial void ErrorReadingQuery(ILogger logger, string queryName, Exception ex);

    [LoggerMessage(
        EventId = 1003,
        Level = LogLevel.Debug,
        Message = "Executed query '{QueryName}' in {ElapsedTime}.")]
    internal static partial void ExecutedQuery(ILogger logger, string queryName, TimeSpan elapsedTime);

    // --- Command Logging Methods ---

    [LoggerMessage(
        EventId = 2001,
        Level = LogLevel.Debug,
        Message = "Start executing command '{CommandName}'")]
    internal static partial void StartExecutingCommand(ILogger logger, string commandName);

    [LoggerMessage(
        EventId = 2002,
        Level = LogLevel.Error,
        Message = "Exception thrown while executing command '{CommandName}'")]
    internal static partial void ErrorExecutingCommand(ILogger logger, string commandName, Exception ex);

    [LoggerMessage(
        EventId = 2003,
        Level = LogLevel.Debug,
        Message = "Executed command '{CommandName}' in {ElapsedTime}.")]
    internal static partial void ExecutedCommand(ILogger logger, string commandName, TimeSpan elapsedTime);
}